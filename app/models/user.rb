require 'digest/sha1'
class User < ActiveRecord::Base
  
  has_many :events,:dependent => true
  # ---------------------------------------
  # The following code has been generated by role_requirement.
  # You may wish to modify it to suit your need
  
  attr_protected :role
  
  # has_role? simply needs to return true or false whether a user has a role or not.  
  # It may be a good idea to have "admin" roles return true always
  def has_role?(role_in_question)
    return true if self.role=="admin"
    self.role == role_in_question.to_s
  end
  
  # ---------------------------------------
      
  # Virtual attribute for the unencrypted password
  attr_accessor :password

  validates_presence_of     :area_code,:telephone,:address, :if =>:ihave_car?
  validates_presence_of     :name_organizer, :area_code_organizer, :telephone_organizer, :address_organizer, :city_organizer, :if => :im_organizer?
  validates_presence_of     :login, :email, :name, :lastname, :postal_code, :city, :country, :state
  validates_presence_of     :password,                   :if => :password_required?
  validates_presence_of     :password_confirmation,      :if => :password_required?
  validates_length_of       :password, :within => 4..40, :if => :password_required?
  validates_confirmation_of :password,                   :if => :password_required?
  validates_length_of       :login,    :within => 3..40
  validates_length_of       :email,    :within => 3..100
  validates_format_of :email, :with => /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i
  validates_uniqueness_of   :login, :email, :case_sensitive => false

 
  before_save :encrypt_password

  def im_organizer?
    if self.role=="organizer" || self.role=="organizer-driver"     
      return true
    else
      return false
    end
  end
  
   def es_mi_evento?(event)
    if self.current_user.id ==  @event.id
      return true
    else
      return false
    end
  end

def im_driver?
    if self.role=="driver" || self.role =="organizer-driver"
      return true
    else
      return false
    end
  end
  
  def tiene_auto?
    if self.has_car
      return User.human_attribute_name(:im_driver)
    else
      return  User.human_attribute_name(:imnot_driver)
    end
  end
  
  def ihave_car?
    if self.has_car 
      return true
    else
      return false
    end
  end
  
  def admin? 
    if self.role=="admin"
      return true
    else
      return false
    end
  end
  
  # Authenticates a user by their login name and unencrypted password.  Returns the user or nil.
  def self.authenticate(login, password)
    u = find_by_login(login) # need to get the salt
    u && u.authenticated?(password) ? u : nil
  end

  # Encrypts some data with the salt.
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest("--#{salt}--#{password}--")
  end

  # Encrypts the password with the user salt
  def encrypt(password)
    self.class.encrypt(password, salt)
  end

  def authenticated?(password)
    crypted_password == encrypt(password)
  end

  def remember_token?
    remember_token_expires_at && Time.now.utc < remember_token_expires_at 
  end
  

  
  # These create and unset the fields required for remembering users between browser closes
  def remember_me
    self.remember_token_expires_at = 2.weeks.from_now.utc
    self.remember_token            = encrypt("#{email}--#{remember_token_expires_at}")
    save(false)
  end

  def forget_me
    self.remember_token_expires_at = nil
    self.remember_token            = nil
    save(false)
  end

  protected
    # before filter 
    def encrypt_password
      return if password.blank?
      self.salt = Digest::SHA1.hexdigest("--#{Time.now.to_s}--#{login}--") if new_record?
      self.crypted_password = encrypt(password)
    end
    
    def password_required?
      crypted_password.blank? || !password.blank?
    end
end
